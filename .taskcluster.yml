version: 1
policy:
  pullRequests: collaborators
tasks:
  $let:
    user: ${event.sender.login}

    fetch_rev:
      $if: 'tasks_for == "github-pull-request"'
      then: ${event.pull_request.head.sha}
      else:
        $if: 'tasks_for == "github-push"'
        then: ${event.after}
        else: ${event.release.tag_name}

    fetch_ref:
      $if: 'tasks_for == "github-pull-request"'
      then: "pull/${event.number}/head"
      else:
        $if: 'tasks_for == "github-push"'
        then: ${event.ref}
        else: "refs/tags/${event.release.tag_name}:refs/tags/${event.release.tag_name}"

    http_repo:
      $if: 'tasks_for == "github-pull-request"'
      then: ${event.pull_request.base.repo.clone_url}
      else: ${event.repository.clone_url}

    head_repo:
      $if: 'tasks_for == "github-pull-request"'
      then: ${event.pull_request.head.repo.clone_url}
      else: ${event.repository.clone_url}

    codecov_secret_url:
      http://taskcluster/secrets/v1/secret/project/fuzzing/codecov-fuzzmanager

  in:
    $if: 'tasks_for in ["github-pull-request", "github-push", "github-release"]'
    then:
      $flatten:
        - $map:
          - {image: ci-py-37, toxenv: 'py37', name: 'tests python 3.7 (no django)'}
          - {image: ci-py-38, toxenv: 'py38', name: 'tests python 3.8 django 4.x'}
          - {image: ci-py-39, toxenv: 'py39', name: 'tests python 3.9 django 4.x'}
          - {image: ci-py-310, toxenv: 'py310', name: 'tests python 3.10 django 4.x'}
          - {image: ci-py-311, toxenv: 'py311', name: 'tests python 3.11 (no django)'}
          each(build):
            taskId: {$eval: as_slugid(build.toxenv)}
            provisionerId: proj-fuzzing
            workerType: ci
            created: {$fromNow: ''}
            deadline: {$fromNow: '1 hour'}
            scopes:
              - secrets:get:project/fuzzing/codecov-fuzzmanager
            payload:
              maxRunTime: 3600
              image:
                namespace: project.fuzzing.orion.${build.image}.master
                path: public/${build.image}.tar.zst
                type: indexed-image
              features:
                taskclusterProxy: true
              env:
                CODECOV_SECRET: codecov-fuzzmanager
                FETCH_REV: ${fetch_rev}
                FETCH_REF: ${fetch_rev}
                TOXENV: ${build.toxenv}
              command:
                - /bin/bash
                - '--login'
                - '-x'
                - '-e'
                - '-c'
                - >-
                  . py-ci.sh;
                  clone ${http_repo};
                  tox;
                  tox_codecov;
            metadata:
              name: FuzzManager ${build.name}
              description: FuzzManager ${build.name}
              owner: '${user}@users.noreply.github.com'
              source: ${http_repo}/raw/${fetch_rev}/.taskcluster.yml
        - $map:
          - {image: ci-node-14, slug: node14, name: 'build frontend node 14'}
          each(build):
            taskId: {$eval: as_slugid(build.slug)}
            provisionerId: proj-fuzzing
            workerType: ci
            created: {$fromNow: ''}
            deadline: {$fromNow: '1 hour'}
            scopes:
              - secrets:get:project/fuzzing/codecov-fuzzmanager
            payload:
              maxRunTime: 3600
              image:
                namespace: project.fuzzing.orion.${build.image}.master
                path: public/${build.image}.tar.zst
                type: indexed-image
              features:
                taskclusterProxy: true
              command:
                - /bin/bash
                - '--login'
                - '-x'
                - '-e'
                - '-c'
                - >-
                  retry () { for _ in {1..9}; do if "$@"; then return; else sleep 30; fi; done; "$@"; };
                  git init repo;
                  cd repo;
                  git remote add origin ${http_repo};
                  retry git fetch -q --depth=1 origin "${fetch_rev}";
                  git -c advice.detachedHead=false checkout ${fetch_rev};
                  cd server/frontend;
                  retry npm install;
                  npm run test;
                  npm run production;
                  set +x;
                  export CODECOV_TOKEN="$(curl --retry 5 -sSL ${codecov_secret_url} | jshon -e secret -e token -u)";
                  set -x;
                  npm run codecov;
              artifacts:
                public/dist:
                  expires: {$fromNow: '6 months'}
                  path: /home/worker/repo/server/frontend/dist/
                  type: directory
            metadata:
              name: FuzzManager ${build.name}
              description: FuzzManager ${build.name}
              owner: '${user}@users.noreply.github.com'
              source: ${http_repo}/raw/${fetch_rev}/.taskcluster.yml
        - taskId: {$eval: as_slugid("linting")}
          provisionerId: proj-fuzzing
          workerType: ci
          created: {$fromNow: ''}
          deadline: {$fromNow: '1 hour'}
          payload:
            maxRunTime: 3600
            image: node:16-alpine
            command:
              - /bin/sh
              - '-x'
              - '-e'
              - '-c'
              - >-
                retry () { i=0; while [ $i -lt 9 ]; do if "$@"; then return; else sleep 30; fi; i="$${i+1}"; done; "$@"; };
                retry apk add --quiet python3 py3-pip git bash;
                retry pip3 install -q pre-commit;
                git init repo;
                cd repo;
                git remote add origin ${http_repo};
                retry git fetch -q --depth=1 origin "${fetch_rev}";
                git -c advice.detachedHead=false checkout ${fetch_rev};
                cd server/frontend;
                npm ci;
                cd ../..;
                pre-commit run -a;
          metadata:
            name: FuzzManager source code linting
            description: FuzzManager source code linting
            owner: '${user}@users.noreply.github.com'
            source: ${http_repo}/raw/${fetch_rev}/.taskcluster.yml
        - taskId: {$eval: as_slugid("docker")}
          provisionerId: proj-fuzzing
          workerType: ci
          dependencies:
            - {$eval: as_slugid("linting")}
            - {$eval: as_slugid("node14")}
            - {$eval: as_slugid("py37")}
            - {$eval: as_slugid("py38")}
            - {$eval: as_slugid("py39")}
            - {$eval: as_slugid("py310")}
            - {$eval: as_slugid("py311")}
          created: {$fromNow: ''}
          deadline: {$fromNow: '1 hour'}
          payload:
            image:
              namespace: project.fuzzing.orion.orion-builder.master
              path: public/orion-builder.tar.zst
              type: indexed-image
            maxRunTime: 3600
            capabilities:
              privileged: true
            env:
              LOAD_DEPS: "0"
              GIT_REPOSITORY: ${head_repo}
              GIT_REVISION: ${fetch_rev}
              BUILD_TOOL: podman
              DOCKERFILE: Dockerfile
              IMAGE_NAME: mozillasecurity/fuzzmanager
              ARCHIVE_PATH: /image.tar
            command:
              - sh
              - -c
              - uname -a && exec build
            artifacts:
              public/fuzzmanager.tar.zst:
                expires: {$fromNow: '6 months'}
                path: /image.tar.zst
                type: file
          scopes:
            - docker-worker:capability:privileged
          metadata:
            name: FuzzManager Docker build
            description: FuzzManager Docker build
            owner: '${user}@users.noreply.github.com'
            source: ${http_repo}/raw/${fetch_rev}/.taskcluster.yml
        - $if: 'tasks_for in ["github-push"] && fetch_ref == "refs/heads/master"'
          then:
            - taskId: {$eval: as_slugid("docker_push")}
              provisionerId: proj-fuzzing
              workerType: ci
              dependencies:
                - {$eval: as_slugid("docker")}
              created: {$fromNow: ''}
              deadline: {$fromNow: '1 hour'}
              payload:
                image:
                  namespace: project.fuzzing.orion.orion-builder.master
                  path: public/orion-builder.tar.zst
                  type: indexed-image
                maxRunTime: 3600
                features:
                  taskclusterProxy: true
                env:
                  TASK_ID: {$eval: as_slugid("docker")}
                  TASKCLUSTER_SECRET: "project/fuzzing/docker-hub"
                  GIT_REPOSITORY: ${head_repo}
                  GIT_REVISION: ${fetch_rev}
                command:
                  - sh
                  - -c
                  - uname -a && exec push
              scopes:
                - secrets:get:project/fuzzing/docker-hub
              metadata:
                name: FuzzManager Docker push
                description: FuzzManager Docker push
                owner: '${user}@users.noreply.github.com'
                source: ${http_repo}/raw/${fetch_rev}/.taskcluster.yml
        - $if: 'tasks_for in ["github-release"]'
          then:
            - provisionerId: proj-fuzzing
              workerType: ci
              dependencies:
                - {$eval: as_slugid("linting")}
                - {$eval: as_slugid("node14")}
                - {$eval: as_slugid("py37")}
                - {$eval: as_slugid("py38")}
                - {$eval: as_slugid("py39")}
                - {$eval: as_slugid("py310")}
                - {$eval: as_slugid("py311")}
              created: {$fromNow: ''}
              deadline: {$fromNow: '1 hour'}
              scopes:
                - secrets:get:project/fuzzing/pypi-fuzzmanager
              payload:
                maxRunTime: 3600
                image:
                  namespace: project.fuzzing.orion.ci-py-38.master
                  path: public/ci-py-38.tar.zst
                  type: indexed-image
                features:
                  taskclusterProxy: true
                env:
                  FETCH_REV: ${fetch_rev}
                  FETCH_REF: ${fetch_rev}
                  PYPI_SECRET: ${pypi-fuzzmanager}
                command:
                  - /bin/bash
                  - '--login'
                  - '-x'
                  - '-e'
                  - '-c'
                  - >-
                    . py-ci.sh;
                    clone ${http_repo};
                    tox_pypi;
              metadata:
                name: FuzzManager PyPI upload
                description: FuzzManager PyPI upload
                owner: '${user}@users.noreply.github.com'
                source: ${http_repo}/raw/${fetch_rev}/.taskcluster.yml
